// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  whopId    String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  plan      PlanType @default(FREE)
  
  // Whop metadata
  companyId String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  companies      CompanyUser[]
  monitors       Monitor[]
  alerts         Alert[]
  notifications  Notification[]
  
  @@map("users")
}

model Company {
  id      String @id @default(cuid())
  whopId  String @unique
  name    String
  domain  String?
  plan    PlanType @default(FREE)
  
  // Subscription info
  subscriptionId String?
  customerId     String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users    CompanyUser[]
  monitors Monitor[]
  alerts   Alert[]
  
  @@map("companies")
}

model CompanyUser {
  id        String           @id @default(cuid())
  userId    String
  companyId String
  role      CompanyUserRole  @default(MEMBER)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId])
  @@map("company_users")
}

model Monitor {
  id          String      @id @default(cuid())
  name        String
  url         String
  type        MonitorType @default(HTTP)
  status      MonitorStatus @default(ACTIVE)
  
  // Monitor configuration
  interval    Int         @default(300) // seconds
  timeout     Int         @default(30)  // seconds
  retries     Int         @default(3)
  
  // HTTP specific
  method      String      @default("GET")
  headers     Json?
  body        String?
  
  // Expected response
  expectedStatus    Int?    @default(200)
  expectedContent   String?
  expectedKeywords  String[]
  
  // SSL monitoring
  sslCheck          Boolean @default(false)
  sslExpiryDays     Int?    @default(30)
  
  // Performance monitoring
  responseTimeThreshold Int? @default(5000) // ms
  
  // Whop specific monitoring
  whopMetrics       Json?
  whopThresholds    Json?
  
  // Ownership
  userId    String
  companyId String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastCheck DateTime?
  
  // Relations
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  checks     MonitorCheck[]
  alerts     Alert[]
  incidents  Incident[]
  
  @@map("monitors")
}

model MonitorCheck {
  id          String      @id @default(cuid())
  monitorId   String
  status      CheckStatus @default(PENDING)
  
  // Response data
  responseTime    Int?
  statusCode      Int?
  responseSize    Int?
  responseHeaders Json?
  
  // SSL data
  sslExpiryDate   DateTime?
  sslIssuer       String?
  
  // Error information
  errorMessage    String?
  errorType       String?
  
  // Whop metrics
  whopData        Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  checkedAt DateTime @default(now())
  
  // Relations
  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  @@map("monitor_checks")
}

model Alert {
  id          String      @id @default(cuid())
  name        String
  type        AlertType   @default(DOWN)
  status      AlertStatus @default(ACTIVE)
  
  // Alert configuration
  conditions  Json
  threshold   Float?
  duration    Int?        @default(300) // seconds
  
  // Notification settings
  channels    AlertChannel[]
  escalation  Json?
  
  // Ownership
  userId      String
  companyId   String?
  monitorId   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  monitor      Monitor?       @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  incidents    Incident[]
  notifications Notification[]
  
  @@map("alerts")
}

model Incident {
  id          String         @id @default(cuid())
  title       String
  description String?
  severity    IncidentSeverity @default(MEDIUM)
  status      IncidentStatus @default(OPEN)
  
  // Incident data
  triggeredBy Json?
  resolvedBy  Json?
  
  // Ownership
  monitorId   String
  alertId     String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  
  // Relations
  monitor       Monitor        @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  alert         Alert?         @relation(fields: [alertId], references: [id], onDelete: SetNull)
  notifications Notification[]
  
  @@map("incidents")
}

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType   @default(EMAIL)
  status      NotificationStatus @default(PENDING)
  
  // Notification data
  recipient   String
  subject     String?
  content     String
  metadata    Json?
  
  // Delivery info
  sentAt      DateTime?
  deliveredAt DateTime?
  errorMessage String?
  
  // Relations
  userId      String
  alertId     String?
  incidentId  String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  alert    Alert?    @relation(fields: [alertId], references: [id], onDelete: Cascade)
  incident Incident? @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Enums
enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum CompanyUserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum MonitorType {
  HTTP
  HTTPS
  PING
  TCP
  WHOP_METRICS
  WHOP_SALES
  WHOP_USERS
  WHOP_REVENUE
}

enum MonitorStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum CheckStatus {
  PENDING
  SUCCESS
  FAILED
  TIMEOUT
  ERROR
}

enum AlertType {
  DOWN
  UP
  SLOW_RESPONSE
  SSL_EXPIRY
  KEYWORD_MISSING
  KEYWORD_FOUND
  STATUS_CODE
  WHOP_THRESHOLD
  WHOP_ANOMALY
}

enum AlertStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum AlertChannel {
  EMAIL
  SLACK
  DISCORD
  WEBHOOK
  SMS
  PUSH
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum NotificationType {
  EMAIL
  SLACK
  DISCORD
  WEBHOOK
  SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
} 